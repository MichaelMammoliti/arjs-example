
// planet revolution speeds
// Mercury: 88 days.
// Venus: 225 days.
// Earth: 365 days.
// Mars: 687 days.
// Jupiter: 4,333 days.
// Saturn: 10,759 days.
// Uranus: 30,688 days.
// Neptune: 60,182 days.

// planet rotation speeds
// Mercury: 1,408 hours.
// Venus: 5,832 hours.
// Earth: 24 hours.
// Mars: 25 hours.
// Jupiter: 10 hours.
// Saturn: 11 hours.
// Uranus: 17 hours.
// Neptune: 16 hours.

// I need to animate on a 3d space the planets revolving around the sun,
// so I give me the deltas 
// Mercury: { x: 0.4, z: 0, y:  }

// first planet outside the milky way in light years: name, distance, size
// Andromeda: 2.537e6, 220000, 0.5
// Au converter to seconds

// Orbit Positions Relative To Sun
// Orbit axes are tilted relative to the ecliptic
// Mercury: 0.39 AU
// Venus: 0.72 AU
// Earth: 1 AU

// Example created by Lee Stemkoski: https://github.com/stemkoski
// Based on the AR.js library and examples created by Jerome Etienne: https://github.com/jeromeetienne/AR.js/
import * as THREE from 'three';
import { Planet } from './types';

const stack: Function[] = [];
let deltaTime = 0;
let totalTime = 0;

import { PlanetUnloaded } from './types';

export const planetDetails: PlanetUnloaded[] = [
  {
    name: 'sun',
    size: 0.8,
    texturePath: 'public/images/sun-sphere.jpg',
    texture: undefined,
    distance: 0,
  },
  {
    name: 'mercury',
    size: 0.8,
    texturePath: 'public/images/mercury-sphere.jpg',
    texture: undefined,
    distance: 0.4,
  },
  {
    name: 'venus',
    size: 0.8,
    texturePath: 'public/images/venus-sphere.jpg',
    texture: undefined,
    distance: 0.7,
  },
  {
    name: 'earth',
    size: 0.8,
    texturePath: 'public/images/earth-sphere.jpg',
    texture: undefined,
    distance: 1,
  },
  {
    name: 'mars',
    size: 0.8,
    texturePath: 'public/images/mars-sphere.jpg',
    texture: undefined,
    distance: 1.5,
  },
  {
    name: 'jupiter',
    size: 0.8,
    texturePath: 'public/images/jupiter-sphere.jpg',
    texture: undefined,
    distance: 2.2,
  },
  {
    name: 'saturn',
    size: 0.8,
    texturePath: 'public/images/saturn-sphere.jpg',
    texture: undefined,
    distance: 3.7,
  },
  {
    name: 'uranus',
    size: 0.8,
    texturePath: 'public/images/uranus-sphere.jpg',
    texture: undefined,
    distance: 5.9,
  },
  {
    name: 'neptune',
    size: 0.8,
    texturePath: 'public/images/neptune-sphere.jpg',
    texture: undefined,
    distance: 7.2,
  },
];

// const between = (min: number, max: number) => {
//   return Math.random() * (max - min) + min;
// };

const initialiseToolkit = (video: HTMLVideoElement) => {
  const loader = new THREE.TextureLoader();
  const clock = new THREE.Clock();
  const scene = new THREE.Scene();
  const camera = new THREE.Camera();
  const renderer = new THREE.WebGLRenderer({
    antialias: true,
    alpha: true,
  });

  const arToolkitContext: any = new THREEx.ArToolkitContext({
    cameraParametersUrl: 'public/data/camera_para.dat',
    detectionMode: 'mono',
  });

  // const arToolkitSource: any = new THREEx.ArToolkitSource({
  //   sourceType: 'video',
  //   source: video,
  //   sourceWidth: video.width,
  //   sourceHeight: video.height,
  //   displayWidth: video.width,
  //   displayHeight: video.height,
  // });

  const arToolkitSource: any = new THREEx.ArToolkitSource({
    sourceType: 'webcam',
  });

  // Set up renderer
  renderer.setClearColor(new THREE.Color('lightgrey'), 0);
  renderer.setSize(640, 480);
  renderer.domElement.style.position = 'absolute';
  renderer.domElement.style.top = '0px';
  renderer.domElement.style.left = '0px';

  document.body.appendChild(renderer.domElement);

  const render = () => {
    renderer.render(scene, camera);
  };

  const loadTextures = (paths: string[]) => {
    const promises: Promise<THREE.Texture>[] = paths.map((path) => {
      return new Promise((resolve) => {
        loader.load(path, resolve);
      });
    });

    return Promise.all(promises);
  };

  return {
    deltaTime,
    totalTime,
    loader,
    clock,
    scene,
    camera,
    renderer,
    arToolkitContext,
    arToolkitSource,
    loadTextures,
    render,
  };
};

const createPlanet = ({ size, texture }: Planet) => {
  const globeMaterial = new THREE.MeshBasicMaterial({
    map: texture,
    opacity: 1,
  });

  const globeGeometry = new THREE.SphereGeometry(size, 32, 32);
  const globeMesh = new THREE.Mesh(globeGeometry, globeMaterial);

  return globeMesh;
};

const startVideo = async () => {
  try {
    // const videoWrapper = document.createElement('div');
    // videoWrapper.id = 'video-wrapper';
    // document.body.appendChild(videoWrapper);

    const constraints: MediaStreamConstraints = {
      video: {
        width: { ideal: 4096 },
        height: { ideal: 2160 },
        facingMode: 'environment',
      },
    };

    const stream = await navigator.mediaDevices.getUserMedia(constraints);

    const video = document.createElement('video');

    video.style.position = 'fixed';
    video.style.top = '0';
    video.style.left = '0';
    video.style.height = '100dvh';
    video.style.width = '100dvw';
    video.srcObject = stream;
    video.play();

    // videoWrapper.appendChild(video);
    return video;
  } catch (error) {
    console.error(error);
  }
};

const createPointLight = () => {
  const pointLight = new THREE.PointLight(0xffffff, 1, 100);
  pointLight.position.x = 0;
  pointLight.position.y = 3;
  pointLight.position.z = 0;

  const pointLightGeometry = new THREE.SphereGeometry(0.1, 16, 8);
  const pointLightMaterial = new THREE.MeshBasicMaterial({
    color: 0xffffff,
    opacity: 1,
  });

  const pointLightMesh = new THREE.Mesh(pointLightGeometry, pointLightMaterial);

  pointLight.add(pointLightMesh);

  return pointLight;
};

const init = async () => {
  const video = await startVideo();

  const {
    loadTextures,
    arToolkitContext,
    camera,
    arToolkitSource,
    renderer,
    scene,
    render,
    clock,
  } = initialiseToolkit(video);

  const textures = await loadTextures(
    planetDetails.map((planetDetail) => planetDetail.texturePath),
  );

  const planets = textures.map((texture, index) =>
    createPlanet({ ...planetDetails[index], texture }),
  );

  const sun = planets[0];
  const mercury = planets[1];
  const venus = planets[2];
  const earth = planets[4];

  const ambientLight = new THREE.AmbientLight(0xcccccc, 0.5);

  const markerRootA = new THREE.Group();
  const markerRootB = new THREE.Group();
  const markerRootC = new THREE.Group();
  const markerRootD = new THREE.Group();

  // letterA
  const markerA = new THREEx.ArMarkerControls(arToolkitContext, markerRootA, {
    type: 'pattern',
    patternUrl: 'public/data/letterA.patt',
  });

  // letterB
  const markerB = new THREEx.ArMarkerControls(arToolkitContext, markerRootB, {
    type: 'pattern',
    patternUrl: 'public/data/letterB.patt',
  });

  // letterC
  const markerC = new THREEx.ArMarkerControls(arToolkitContext, markerRootC, {
    type: 'pattern',
    patternUrl: 'public/data/letterC.patt',
  });

  // letterD
  const markerD = new THREEx.ArMarkerControls(arToolkitContext, markerRootD, {
    type: 'pattern',
    patternUrl: 'public/data/letterD.patt',
  });

  markerRootA.add(sun);
  markerRootB.add(mercury);
  markerRootC.add(venus);
  markerRootD.add(earth);

  scene.add(markerRootA);
  scene.add(markerRootB);
  scene.add(markerRootC);
  scene.add(markerRootD);

  scene.add(ambientLight);
  scene.add(camera);

  const animateMesh = (mesh: THREE.Mesh) => {
    mesh.rotation.y += 0.02;
  };

  // Create tree for the scene
  markerRootA.add(createPointLight());

  // put sun in the middle
  const onResize = () => {
    arToolkitSource.onResize();
    arToolkitSource.copySizeTo(renderer.domElement);

    if (arToolkitContext.arController !== null) {
      arToolkitSource.copySizeTo(arToolkitContext.arController.canvas);
    }
  };

  const handleArToolkitSourceInit = () => {
    onResize();
  };

  const handleArToolkitContextInit = () => {
    camera.projectionMatrix.copy(arToolkitContext.getProjectionMatrix());
  };

  const handleWindowResize = () => {
    onResize();
  };

  window.addEventListener('resize', handleWindowResize);
  arToolkitSource.init(handleArToolkitSourceInit);
  arToolkitContext.init(handleArToolkitContextInit);

  const update = () => {
    if (markerRootA.visible) {
      animateMesh(earth);
    }

    if (markerRootB.visible) {
      animateMesh(sun);
    }

    if (markerRootC.visible) {
      animateMesh(mercury);
    }

    if (markerRootD.visible) {
      animateMesh(venus);
    }

    if (arToolkitSource.ready !== false) {
      arToolkitContext.update(arToolkitSource.domElement);
    }
  };

  const animate = () => {
    requestAnimationFrame(animate);

    deltaTime = clock.getDelta();
    totalTime += deltaTime;

    update();
    render();
  };

  animate();
};

init();

// Create a point light
// const pointLight = new THREE.PointLight(0xffffff, 1, 100);
// pointLight.position.set(0.5, 3, 2);

// const pointLightGeometry = new THREE.SphereGeometry(0.1, 16, 8);
// const pointLightMaterial = new THREE.MeshBasicMaterial({
//   color: 0xffffff,
//   opacity: 0.5
// });
// const pointLightMesh = new THREE.Mesh(pointLightGeometry, pointLightMaterial)

// Create tree for the scene
// pointLight.add(pointLightMesh);
// markerRoot1.add(pointLight);
